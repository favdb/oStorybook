<?xml version="1.0" encoding="utf-8"?>
<!--
		English Disambiguation Rules for LanguageTool Copyright (C) 2008
		Marcin Miłkowski		
$Id: disambiguation.xml,v 1.45 2010-09-25 11:55:08 milek_pl Exp $
	-->
<rules lang="en" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../disambiguation.xsd">
	<rule name="Modal verb + verb/noun -> modal verb + verb" id="MD_VB">
		<pattern mark="1">
			<token postag="MD" />
			<and>
				<token postag="VB" />
				<token postag="NN" />
			</and>
		</pattern>
		<disambig postag="VB" />
	</rule>
	<rule name="be + to + verb/... ->be + to + verb" id="BE_TO_VB">
		<pattern mark="2">
			<token inflected="yes">be</token>
			<token>to</token>
			<and>
				<token postag="VB" />
				<token postag_regexp="yes" postag="JJ|NN.*" />
			</and>
		</pattern>
		<disambig postag="VB" />
	</rule>
	<!-- 
	<rule name="have as verb/noun + past participle -> have/modal" id="HAVE_VBN">
		<pattern mark="0">
			<token>have</token>
			<token postag="VBN" />
		</pattern>
		<disambig><match no="1" postag_regexp="yes" postag="MD" /></disambig>
	</rule>
	<rule name="have as verb/noun + not -> have/modal" id="HAVE_NOT">
		<pattern mark="0">
			<token>have</token>
			<token>not</token>
		</pattern>
		<disambig><match no="1" postag_regexp="yes" postag="MD" /></disambig>
	</rule>
	 -->
	 <rule name="no determiner + have as verb/noun ->have/verb" id="NODT_HAVE">
	 	<pattern mark="1">
	 		<token><exception postag_regexp="yes" postag="PRP\$"/><exception regexp="yes">the|a</exception></token>
	 		<token>have</token>
	 	</pattern>
	 	<disambig><match no="1" postag_regexp="yes" postag="VB" /></disambig>
	 </rule>
	<rulegroup name="well + past participle -> well + adjective"
		id="WELL_VBN">
		<rule>
			<pattern mark="0">
				<token postag="RB">well</token>
				<token postag="VBN" />
			</pattern>
			<disambig><match no="1" postag_regexp="yes" postag="RB" /></disambig>
		</rule>
		<rule>
			<pattern mark="1">
				<token>well</token>
				<token postag="VBN" />
			</pattern>
			<disambig postag="JJ" />
		</rule>
	</rulegroup>
	<rulegroup name="in as noun -> in as preposition" id="IN_NN_IN">
		<rule name="in as noun/preposition + the -> in as preposition"
			id="IN_IN">
			<pattern mark="0">
				<token>in</token>
				<token postag="DT" />
			</pattern>
			<disambig postag="IN" />
		</rule>
		<rule name="in as noun/preposition + uncountable noun -> in as preposition"
			id="IN_NNUN">
			<pattern mark="0">
				<token>in</token>
				<token postag="NN:U.*" postag_regexp="yes" />
			</pattern>
			<disambig postag="IN" />
		</rule>
	</rulegroup>
	<rule
		name="the/these... + numeral + are (noun/verb) -> the... + numer + are (verb)"
		id="DT_CD_ARE_VB">
		<pattern mark="2">
			<token postag="DT" />
			<token postag="CD" />
			<token>are</token>
		</pattern>
		<disambig><match no="3" postag="VBP" postag_regexp="yes" /></disambig>
	</rule>
	<rule name="are (noun/verb)  + adjective/gerund/preposition -> are (verb)" id="ARE_JJ_VBG">
		<pattern mark="0">
			<token>are</token>
			<token postag="JJ.*|VBG|IN" postag_regexp="yes" />
		</pattern>
		<disambig><match no="1" postag="VBP" postag_regexp="yes" /></disambig>
	</rule>
	<rule name="NNS|EX + are (noun/verb) -> are (verb)" id="NNS_ARE">
		<pattern mark="1">
			<token postag_regexp="yes" postag="EX|NNS"/>
			<token>are</token>
		</pattern>
		<disambig><match no="2" postag="VBP" postag_regexp="yes"/></disambig>
	</rule>
	<rule name="are + we|you -> are (verb)" id="ARE_PRP">
		<pattern mark="0">
		<token>are</token>
		<token regexp="yes">you|we|they</token>
		</pattern>
		<disambig postag="VBP"/>		
	</rule> 	
	<rule name="his (noun/prep) + noun -> his (prep)" id="HIS_NN_PRP">
		<pattern mark="0">
			<token>his</token>
			<token postag="NN.*" postag_regexp="yes" />
		</pattern>
		<disambig><match no="1" postag="PRP\$" postag_regexp="yes" /></disambig>
	</rule>
	<rule name="no determiner + how (noun/adv) -> how (adv)" id="HOW_WRB">
		<pattern mark="1">
			<token><exception postag_regexp="yes" postag="PRP\$|DT"/></token>
			<token>how</token>			
		</pattern>
		<disambig postag="WRB" />
	</rule>
	<rule name="no determiner + but (noun/conj) -> but (conj)" id="BUT_CC">
		<pattern mark="1">
			<token><exception regexp="yes">a|the</exception></token>
			<token>but</token>			
		</pattern>
		<disambig postag="CC" />
	</rule>	
	<rule name="if (noun/adv) + determiner -> if (conj)" id="IF_NN_CC">
		<pattern mark="0">
			<token>if</token>
			<token postag_regexp="yes" postag="DT|PRP" />
		</pattern>
		<disambig postag="CC" />
	</rule>
	<rule name="los + proper name -> los (proper name)" id="LOS_NNP">
		<pattern mark="0">
			<token>Los</token>
			<token postag="NNP" />
		</pattern>
		<disambig postag="NNP" />
	</rule>
	<rule name="kind (adj) + of -> kind (n)" id="KIND_JJ">
		<pattern mark="0">
			<token>kind</token>
			<token>of</token>
		</pattern>
		<disambig postag="NN" />
	</rule>
	<rule name="be + mine (verb/pron) -> mine (pron)" id="BE_MINE">
		<pattern mark="1">
			<token inflected="yes" skip="1">be</token>
			<token>mine<exception scope="previous" negate_pos="yes" postag_regexp="yes">RB.*</exception></token>
		</pattern>
		<disambig postag="PRP$" />
		<example type="untouched">This is a gold mine.</example>
		<example type="ambiguous" inputform="mine[mine/NN,mine/PRP$,mine/VB,mine/VBP]" outputform="mine[mine/PRP$]">This is <marker>mine</marker>.</example>
		<example type="ambiguous" inputform="mine[mine/NN,mine/PRP$,mine/VB,mine/VBP]" outputform="mine[mine/PRP$]">This is entirely <marker>mine</marker>.</example>
	</rule>

<!-- useful for this/these rule, e.g., in this circumstances -->
	<rule name="preposition + 'this' + verb 3sg/NNS -> nns" id="IN_VBZ_NNS">
		<pattern mark="2">
			<token postag="IN"><exception regexp="yes">as|like</exception></token>
			<token regexp="yes">this|these</token>
			<and>
				<token postag="NNS" />
				<token postag="VBZ"><exception regexp="yes">means|works|shows|leads|takes|lies|goes|stems|gives|makes|does</exception></token>
			</and>
		</pattern>
		<disambig postag="NNS" />
	</rule>
	<rule name="SENT_START + pronoun + verb/NN -> verb" id="SENT_START_PRP_VB_NN">
		<pattern mark="2">
			<token postag="SENT_START" />
			<token regexp="yes">I|you|we|they</token>
			<and>
				<token postag="NN" />
				<token postag="VBP" />
			</and>
		</pattern>
		<disambig postag="VBP" />
	</rule>
	<rule name="t -> contraction (not/RB)" id="T_NOT">
		<pattern mark="1">
		<token regexp="yes">['’]</token>
		<token>t</token>
		</pattern>
		<disambig action="add"><wd lemma="not" pos="RB">t</wd></disambig>
		<example type="untouched">I cannot do it.</example>
		<example type="ambiguous" inputform="t[t]" outputform="t[not/RB]">I can'<marker>t</marker> do it.</example>
	</rule>
	<rulegroup name="let's" id="LETS1">
		<rule>
			<pattern mark="0">
				<token>let</token>
				<token regexp="yes">['’]</token>
				<token>s</token>
			</pattern>
			<disambig postag="VBP" />
		</rule>
		<rule>
			<pattern mark="2">
				<token>let</token>
				<token regexp="yes">['’]</token>
				<token>s</token>
			</pattern>
			<disambig postag="PRP" />
		</rule>
	</rulegroup>
	<rule name="determiner + verb/NN -> NN" id="DT_VB_NN">
		<pattern mark="1">
			<token postag="DT"><exception postag="PDT" /></token>
			<and>
				<token postag_regexp="yes" postag="VBP?" />
				<token postag_regexp="yes" postag="NN.*" ><exception negate_pos="yes" postag="VBP?|NN|NN:UN|NN:U" postag_regexp="yes"/></token>
			</and>
		</pattern>
		<disambig postag="NN" />
	</rule>
	<rule name="determiner + verb/NN -> NN (2)" id="DT_VB_NN_SENTEND">
		<pattern mark="1">
			<token postag="DT"><exception postag="PDT" /></token>
			<and>
				<token postag="VB" />
				<token postag="NN" />
			</and>
			<token postag="SENT_END"/>
		</pattern>
		<disambig postag="NN" />
	</rule>
	
	<!-- 'an' is part of a proper name here -->
	<rule name="Qur'an" id="QUARAN">
		<pattern mark="2">
			<token>Qur</token>
			<token regexp="yes">['’]</token>
			<token>an</token>
		</pattern>
		<disambig postag="NNP" />
	</rule>
	
	<!-- A is not a determiner but a variable in this context -->
	<rule name="a and be" id="A_AND_B">
		<pattern mark="0">
			<token>a</token>
			<token>and</token>
			<token>b</token>
		</pattern>
		<disambig postag="NNP" />
	</rule>
	<rule name="A is..." id="A_IS">
		<pattern case_sensitive="yes" mark="0">
			<token>A</token>
			<token>is</token>
		</pattern>
		<disambig postag="NNP" />
	</rule>
	<rule name="A.B.C." id="ABC">
		<pattern mark="0">
			<token>a</token>
			<token>.</token>
			<token>b</token>
			<token>.</token>
			<token>c</token>
			<token>.</token>
		</pattern>
		<disambig postag="NNP" />
	</rule>
	<!-- 'a' used as a symbol in some technical notation -->
	<rule name="A technical" id="A_TECHNICAL">
		<pattern mark="0">
			<token>a</token>
			<token regexp="yes">[/\+\[\]\(\){}\\,!%&amp;]</token>
		</pattern>
		<disambig postag="SYM"/>
	</rule>
	
	<!--  "A" mentioned only as a letter -->
	<rule name="A mentioned (and not used)" id="A_MENTION">
		<pattern mark="1">
			<token spacebefore="yes" regexp="yes">"|'</token>
			<token spacebefore="no">a</token>
			<token spacebefore="no" regexp="yes">"|'</token>
		</pattern>
		<disambig postag="NNP"/>
	</rule>
	
	<rule name="A priori / posteriori" id="A_PRIORI">
		<pattern mark="0">
		<token>a</token>
		<token regexp="yes">priori|posteriori</token>		
		</pattern>
		<disambig postag="FW"/> <!-- foreign word -->
		<example type="untouched">This is a dog.</example>
		<example type="ambiguous" inputform="a[a/DT]" outputform="a[a/FW]">This is an <marker>a</marker> priori truth.</example>
	</rule>
	
	<rule name="'A' before 'and' and 'or'" id="A_AND_OR">
		<pattern mark="0">
			<token>a</token>
			<token regexp="yes">and|or</token> <!--  add 'is'? -->
		</pattern>
		<disambig postag="NNP"/>
	</rule>
	
	<!-- for Bob Brown etc. -->
	<rule name="NNP/VB + NNP -> NNP" id="NNP_VB_NNP">
		<pattern case_sensitive="yes" mark="0">
			<and>
				<token postag="NNP" regexp="yes">\p{Lu}\p{Ll}+</token>
				<token postag_regexp="yes" postag="VB|JJ" />
			</and>
			<token postag="NNP" regexp="yes">\p{Lu}\p{Ll}+</token>
		</pattern>
		<disambig postag="NNP" />
	</rule>
	<rule name="Uppercase word/NNP|NN -> NNP" id="UPPER_NNP">
		<pattern case_sensitive="yes" mark="0">
		<and>
			<token regexp="yes">\p{Lu}\p{Ll}+<exception scope="previous" postag="SENT_START"/></token>
			<token inflected="yes" regexp="yes" postag="NNP">\p{Lu}\p{Ll}+</token>
			<token inflected="yes" regexp="yes" postag_regexp="yes" postag="NN|NN:.*">\p{Ll}+</token>
		</and>
		</pattern>
		<disambig postag="NNP"/>
	</rule>
	<rule name="NNP + Uppercase NN -> NNP" id="UPPER_NN_NNP">
		<pattern case_sensitive="yes" mark="1">
			<token inflected="yes" regexp="yes" postag="NNP">\p{Lu}\p{Ll}+</token>
			<token regexp="yes" postag="NN">\p{Lu}\p{Ll}+</token>
		</pattern>
		<disambig postag="NNP"/>
		<example type="ambiguous" inputform="City[&lt;/S&gt;,city/JJ,city/NN]" outputform="City[&lt;/S&gt;,city/NNP]">Kansas <marker>City</marker></example>
		<example type="untouched">Los Angeles</example>
	</rule>
	<rule name="Uppercase word/no tag + 's -> NNP" id="UPPER_UNKNOWN_NNP">
		<pattern case_sensitive="yes" mark="0">
			<token regexp="yes" postag="UNKNOWN">\p{Lu}\p{Ll}+</token>
			<token regexp="yes">['’]</token>
			<token>s</token>
		</pattern>
		<disambig postag="NNP"/>
		<example type="ambiguous" inputform="Fodor[Fodor]" outputform="Fodor[Fodor/NNP]"><marker>Fodor</marker>'s concept of modularity is narrow.</example>
		<example type="untouched">Bill's example is very good.</example>		
	</rule>
	
	<rulegroup name="initial -> NNP" id="initial_NNP">
	<rule>
		<pattern case_sensitive="yes" mark="0">
		<token regexp="yes">\p{Lu}$<exception scope="previous" postag="SENT_START"/></token>
		<token>.</token>
		<token postag="NNP"/>
		</pattern>
		<disambig postag="NNP"/>	
	</rule>
	<rule>
		<pattern case_sensitive="yes" mark="0">
		<token regexp="yes">\p{Lu}$<exception scope="previous" postag="SENT_START"/></token>
		<token>.</token>
		<token regexp="yes">\p{Lu}$<exception scope="previous" postag="SENT_START"/></token>
		<token>.</token>
		<token postag="NNP"/>
		</pattern>
		<disambig postag="NNP"/>	
	</rule>		
	</rulegroup>
	
	<rule name="President Brown -> NNP" id="title_NNP">
		<pattern mark="0" case_sensitive="yes">
			<token regexp="yes">(?iu)president|captain|sergeant|general|madame|engineer|minister|chair|deputy|representative|manager|secretary|professor|bishop|attorney|vicar|treasurer|commander|archbishop|editor|principal|dean|sheriff|lieutenant</token>
			<token regexp="yes">\p{Lu}\p{Ll}+|\p{Lu}$</token>
		</pattern>
		<disambig postag="NNP"/>
	</rule>

	<rule name="Abbrevs" id="SEN_GEN_NNP">
		<pattern mark="0">
			<token regexp="yes">Gen|Sen|Prof|Atty|Gov</token>
			<token>.</token>
			<token postag="NNP"/>
		</pattern>
		<disambig postag="NNP"/>
	</rule>
	
	<rule name="elected|appointed + role -> NN:UN" id="elected_NN_UN">
		<pattern mark="1">
			<token regexp="yes">elected|appointed|ordained</token>
			<token postag="NN"><exception negate_pos="yes" postag="NN"></exception></token>
		</pattern>
		<disambig postag="NN:UN"/>
	</rule>
	
	<rule name="Simple gazetteer/proper name rule" id="gazetteer">
		<pattern mark="0" case_sensitive="yes">
			<token regexp="yes">Lake|Fort|Port|Mount</token>
			<token regexp="yes">\p{Lu}\p{Ll}+</token>
		</pattern>
		<disambig postag="NNP"/>
	</rule>
	
	<rule name="street names" id="Street">
		<pattern mark="0" case_sensitive="yes">			
			<token regexp="yes">\p{Lu}\p{Ll}+</token>
			<token regexp="yes">Street|Avenue|Boulevard</token>
		</pattern>
		<disambig postag="NNP"/>
	</rule>
	
	<rule name="candidate|nomination for NN -> NNP" id="candidate_NNP">
		<pattern mark="2">
			<token regexp="yes" inflected="yes">candidate|nomination|election</token>
			<token>for</token>
			<token postag="NN"><exception negate_pos="yes" postag="NN"/></token>
		</pattern>
		<disambig postag="NNP"/>
	</rule>
	
	<rulegroup name="United States" id="USA1">
		<rule>
			<pattern mark="0" case_sensitive="yes">
				<token>United</token>
				<token>States</token>
			</pattern>
			<disambig postag="NNP" />
		</rule>
		<rule>
			<pattern mark="1" case_sensitive="yes">
				<token>United</token>
				<token>States</token>
			</pattern>
			<disambig postag="NNPS" />
		</rule>
	</rulegroup>
	
	<rule name="IN/NN + PRP$ -> IN" id="IN_NN_PRP">
		<pattern mark="0">
			<and>
				<token postag="IN"><exception>like</exception></token>
				<token postag="NN" />
			</and>
			<token postag_regexp="yes" postag="PRP$|NNP" />
		</pattern>
		<disambig postag="IN" />
	</rule>
	
	<!-- the known good solution -->
	<rule name="DT + VBN + JJ -> VBN=JJ" id="DT_VBN_JJ">
		<pattern mark="1">
			<token regexp="yes">a|an|the</token>
			<token postag="VBN" />
			<token postag="JJ" />
		</pattern>
		<disambig postag="JJ" />
	</rule>
	
	<!-- known written works -->
	<rule name="VBN + VBN + NN -> JJ" id="VBN_VBN_NN_JJ">
		<pattern mark="0">
			<token postag="VBN" />
			<token postag="VBN" />
			<token postag_regexp="yes" postag="NN:.*|NNS|NN" />
		</pattern>
		<disambig postag="JJ" />
	</rule>
	<rule name="of + VBN + JJ -> JJ" id="OF_VBN_JJ">
		<pattern mark="1">
			<token>of</token>
			<token postag="VBN" />
			<token postag="JJ" />
		</pattern>
		<disambig postag="JJ" />
	</rule>
	
	<!--  her duck Oliver -->
	<rule name="NN + NNP/JJR -> NNP" id="NN_NNP_JJR">
		<pattern mark="1" case_sensitive="yes">
			<token regexp="yes" postag="NN.*" postag_regexp="yes">\p{Ll}+</token>
			<and>
				<token postag="NNP" regexp="yes">\p{Lu}\p{Ll}+</token>
				<token postag="JJR" />
			</and>
		</pattern>
		<disambig postag="NNP" />
	</rule>
	
	<!--  from X to X -->
	<rulegroup name="from X to X -> NN:UN" id="from_NN_to_NN">
		<rule>
			<pattern mark="1">
				<token>from</token>
				<token postag="NN" />
				<token>to</token>
				<token postag_regexp="yes" postag="NN.*"/>
			</pattern>
			<disambig postag="NN:UN" />
		</rule>
		<rule>
			<pattern mark="3">
				<token>from</token>
				<token postag="NN:UN" />
				<token>to</token>
				<token postag="NN"/>
			</pattern>
			<disambig postag="NN:UN" />
		</rule>
	</rulegroup>
	<rulegroup name="from nose to tail" id="FROM_NOSE_TO_TAIL">
		<rule>
			<pattern mark="1">
				<token>from</token>
				<token>nose</token>
				<token>to</token>
				<token>tail</token>
			</pattern>
			<disambig postag="NN:UN" />
		</rule>
		<rule>
			<pattern mark="3">
				<token>from</token>
				<token>nose</token>
				<token>to</token>
				<token>tail</token>
			</pattern>
			<disambig postag="NN:UN" />
		</rule>
	</rulegroup>
	<rule name="sore throat" id="SORE_THROAT">
		<pattern mark="1">
			<token>sore</token>
			<token>throat</token>
		</pattern>
		<disambig postag="NN:UN" />
	</rule>	
	<rule name="give sb credit/VB -> NN:UN" id="GIVE_CREDIT">
		<pattern mark="2">
			<token inflected="yes">give</token>
			<token postag="NNP|PRP" postag_regexp="yes"/>
			<token>credit</token>
		</pattern>
		<disambig postag="NN:UN"/>
	</rule>
	<rule name="there + SENT_END -> RB" id="EX_SENT_END_RB">
		<pattern mark="0">
			<token postag="EX"/>
			<token postag_regexp="yes" postag="SENT_END|,|IN|PRP"/>
		</pattern>
		<disambig postag="RB"/>
	</rule>
	<rulegroup name="EX + was|is... + VB/NN -> NN" id="EX_ARE_NN">
	<rule>
		<pattern mark="2">
			<token postag="EX"/>
			<token regexp="yes">is|was|are|were</token>
			<and>
			<token postag="VB"/>
			<token postag_regexp="yes" postag="NN.*|JJ.*"/>
			</and>
		</pattern>
		<disambig><match no="3" postag_regexp="yes" postag="NN.*|JJ.*" /></disambig>
	</rule>
	<rule>
		<pattern mark="2">
			<token postag="EX"/>
			<token regexp="yes">is|was|are|were</token>
			<token postag="RB"><exception postag="CC"/></token>
			<and>
			<token postag="VB"/>
			<token postag_regexp="yes" postag="NN.*|JJ.*"/>
			</and>
		</pattern>
		<disambig><match no="3" postag_regexp="yes" postag="NN.*|JJ.*" /></disambig>
	</rule>
	<rule>
		<pattern mark="3">
			<token postag="EX"/>
			<token regexp="yes">have|has</token>
			<token>been</token>
			<token postag="RB"><exception postag="CC"/></token>
			<and>
			<token postag="VB"/>
			<token postag_regexp="yes" postag="NN.*|JJ.*"/>
			</and>
		</pattern>
		<disambig><match no="3" postag_regexp="yes" postag="NN.*|JJ.*" /></disambig>
	</rule>	
	</rulegroup>	
	<rule name="while (IN/NN/VBP) + PRP -> while/IN" id="WHILE_IN_PRP">
		<pattern mark="0">
			<token>while</token>
			<token postag_regexp="yes" postag="PRP|VBG"/>
		</pattern>
		<disambig postag="IN"/>
	</rule>
	<rule name="Web page (noun/verb) -> page (noun)" id="WEB_PAGE">
		<pattern mark="1">
		<token>web</token>
		<token>page</token>
		</pattern>
		<disambig postag="NN"/>	
	</rule>
	<rule name="DT|JJ + JJ/NN + NN -> JJ" id="DT_JJ_NN_JJ">
		<pattern mark="1">
			<token postag_regexp="yes" postag="DT|JJ"/>
			<and>
			<token postag="JJ"><exception postag_regexp="yes" negate_pos="yes" postag="JJ|NN.*"/></token>
			<token postag_regexp="yes" postag="NN.*"/>
			</and>
			<token postag_regexp="yes" postag="NN.*"/>
		</pattern>
		<disambig><match no="2" postag_regexp="yes" postag="JJ" /></disambig>			
	</rule>
	<rule name="till (verb) -> till/IN" id="TILL_IN">
		<pattern mark="0">
			<token>till</token>
			<token postag_regexp="yes" postag="PRP\$|DT"/>
			<token><exception regexp="yes">soil|land|fields|field</exception></token>
		</pattern>
		<disambig postag="IN"/>
	</rule>	
	<rule name="IN + NN/VBG + DT" id="before_NN_VBG">
		<pattern mark="1">
			<token postag="IN"/>
			<and>
				<token postag="NN"/>
				<token postag="VBG"/>
			</and>
			<token postag_regexp="yes" postag="DT|PRP|IN|JJ.*"/>
		</pattern>
		<disambig><match no="2" postag="VBG" postag_regexp="yes"/></disambig>
	</rule>
	<rule name="be + NN/VBG + DT" id="be_NN_VBG">
		<pattern mark="1">
			<token inflected="yes">be</token>
			<and>
				<token postag="NN"/>
				<token postag="VBG"/>
			</and>			
		</pattern>
		<disambig><match no="2" postag="VBG" postag_regexp="yes"/></disambig>
	</rule>
	<rule name="without having (NN/VBG)->VBG" id="without_kk_NN_VBG">
		<pattern mark="1">
			<token regexp="yes">before|after|while|from|without</token>
			<and>
				<token postag="NN"/>
				<token postag="VBG">having</token>
			</and>			
		</pattern>
		<disambig><match no="2" postag="VBG" postag_regexp="yes"/></disambig>
	</rule>
	<rule name="having (NN/VBG) + VBN ->VBG" id="HAVING_VBN">
		<pattern mark="0">			
			<and>
				<token postag="NN"/>
				<token postag="VBG">having</token>
			</and>			
			<token postag="VBN"/>
		</pattern>
		<disambig><match no="1" postag="VBG" postag_regexp="yes"/></disambig>
	</rule>
	<rule name="are + VBG/NN -> VBG" id="ARE_VBG_NN">
		<pattern mark="2">
			<token regexp="yes">['’]</token>
			<token>re</token>
			<token postag="VBG"/>
		</pattern>
		<disambig><match no="3" postag="VBG" postag_regexp="yes"/></disambig>
	</rule>
	<rule name="I'm -> VBP" id="AM_VBP">
		<pattern mark="2">
			<token>I</token>
			<token regexp="yes">['’]</token>
			<token>m</token>			
		</pattern>
		<disambig action="add"><wd lemma="be" pos="VBP">m</wd></disambig>
	</rule>	
	<rule name="Don't|do|don/vb ->don't/vb" id="DONT_VB">
		<pattern mark="0">
			<token>don</token>
			<token regexp="yes">['’]</token>
			<token>t</token>
		</pattern>
		<disambig action="add"><wd pos="VBP" lemma="do"/></disambig>
	</rule>
	<rule name="'s -> be/vbz" id="POS_BE_VBZ">
		<pattern mark="2">
			<token postag_regexp="yes" postag="WP|PRP"/>
			<token regexp="yes">['’]</token>
			<token>s</token>
		</pattern>
		<disambig action="add"><wd pos="VBZ" lemma="be"/></disambig>
	</rule>
	<rulegroup name="off/in season(NN) -> NN:UN" id="SEASON">
	<rule>
		<pattern mark="1">
			<token regexp="yes">off|in</token>
			<token>season</token>
		</pattern>
		<disambig postag="NN:UN"/>
	</rule>
	<rule>
		<pattern mark="2">
			<token>out</token>
			<token>of</token>
			<token>season</token>
		</pattern>
		<disambig postag="NN:UN"/>
	</rule>
	</rulegroup>
	<rulegroup name="coast to coast (NN:UN)" id="COAST_TO_COAST">
		<rule>
			<pattern mark="0">
				<token>coast</token>
				<token>to</token>
				<token>coast</token>
			</pattern>
			<disambig postag="NN:UN"/>
		</rule>
		<rule>
			<pattern mark="2">
				<token>coast</token>
				<token>to</token>
				<token>coast</token>
			</pattern>
			<disambig postag="NN:UN"/>
		</rule>
	</rulegroup>
	<rule name="about + figure -> about (RB)" id="ABOUT_NN_RB">
		<pattern mark="0">
			<token>about</token>
			<token regexp="yes">(one\-(third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|sixteenth|hundredth|thousandth|millionth|trillionth|quadrillionth|quintillionth|half))|two\-(thirds)</token>
		</pattern>
		<disambig postag="RB"/>
	</rule>
	<rulegroup name="face to face" id="FACE_TO_FACE">
	<rule>
		<pattern mark="0">
			<token>face</token>
			<token>to</token>
			<token>face</token>
		</pattern>
		<disambig postag="NN:UN"/>
	</rule>
	<rule>
		<pattern mark="2">
			<token>face</token>
			<token>to</token>
			<token>face</token>
		</pattern>
		<disambig postag="NN:UN"/>
	</rule>
	</rulegroup>
	<rulegroup name="arm in arm" id="ARM_IN_ARM">
	<rule>
		<pattern mark="0">
			<token>arm</token>
			<token>in</token>
			<token>arm</token>
		</pattern>
		<disambig postag="NN:UN"/>
	</rule>
	<rule>
		<pattern mark="2">
			<token>arm</token>
			<token>in</token>
			<token>arm</token>
		</pattern>
		<disambig postag="NN:UN"/>
	</rule>
	</rulegroup>
	<rule name="old hat" id="OLD_HAT">
		<pattern mark="1">
			<token>old</token>
			<token>hat</token>
		</pattern>
		<disambig postag="NN:UN"/>
	</rule>
	<rule name="Figure|Table|Appendix 1 -> NNP" id="figure_1_NNP">
		<pattern mark="0">
			<token regexp="yes">figure|table|appendix|chapter|part|fig|section|picture|lemma|column|row|fraction</token>
			<token regexp="yes">\d+([\.\-]\d+)*|[A-Z]</token>
		</pattern>
		<disambig postag="NNP"/>
	</rule>
	<rule name="worth + VBG/NN -> VBG" id="WORTH_VBG_NN">
		<pattern mark="1">
			<token>worth</token>
			<and>
				<token postag="NN"/>
				<token postag="VBG"/>
			</and>
		</pattern>
		<disambig><match no="2" postag_regexp="yes" postag="VBG"/></disambig>
	</rule>
	<rule name="NO/DT/NN/NNP + NN|JJ -> NO/DT" id="IN_NO_DT">
		<pattern mark="0">			
			<token>no</token>
			<token postag_regexp="yes" postag="NN|JJ.*"/>
		</pattern>
		<disambig postag="DT"/>
	</rule>
	<rule name="PRP + VBZ/NNS -> VBZ" id="PRP_VBZ">
		<pattern mark="1">
			<token regexp="yes">it|he|she</token>
			<and>
				<token postag="VBZ"/>
				<token postag_regexp="yes" postag="NN.*"/>
			</and>
		</pattern>
		<disambig><match no="2" postag="VBZ" postag_regexp="yes"/></disambig>
	</rule>
	<rule name="PRP + MD/NN -> MD" id="PRP_MD">
		<pattern mark="1">
			<token postag="PRP"/>
			<and>
				<token postag="MD"/>
				<token postag_regexp="yes" postag="NN.*"/>
			</and>
		</pattern>
		<disambig><match no="2" postag="MD" postag_regexp="yes"/></disambig>
	</rule>
	<rule name="PDT/DT -> DT" id="PDT_DT">
		<pattern mark="0">
			<and>
			<token postag="PDT"/>
			<token postag="DT"/>
			</and>
			<token><exception postag_regexp="yes" postag="DT|PRP\$"/></token>
		</pattern>
		<disambig postag="DT"/>
		<example type="ambiguous" inputform="All[all/DT,all/JJ,all/NN:U,all/PDT]" outputform="All[all/DT]"><marker>All</marker> students are happy.</example>
		<example type="untouched">All the people.</example>
	</rule>
	<rule name="PDT/DT -> PDT" id="PDT_PDT">
		<pattern mark="0">
			<and>
			<token postag="PDT"/>
			<token postag="DT"/>
			</and>
			<token postag_regexp="yes" postag="DT|PRP\$"/>
		</pattern>
		<disambig postag="PDT"/>
		<example type="ambiguous" inputform="All[all/DT,all/JJ,all/NN:U,all/PDT]" outputform="All[all/PDT]"><marker>All</marker> the people are happy.</example>
		<example type="untouched">All students are happy.</example>			
	</rule>
	<rule name="WDT/WP ->WDT" id="WP_WDT">
		<pattern mark="0">
			<and>
			<token postag="WP"/>
			<token postag="WDT"/>
			</and>
			<token postag_regexp="yes" postag="NN|NN:UN"/>
		</pattern>
		<disambig postag="WDT"/>
		<example type="ambiguous" inputform="What[what/UH,what/WDT,what/WP]" outputform="What[what/WDT]"><marker>What</marker> kind of bread is this?</example>
		<example type="untouched">What are you doing?</example>		
	</rule>
	<rule name="WDT/WP ->WP" id="WDT_WP">
		<pattern mark="0">
			<and>
			<token postag="WP"/>
			<token postag="WDT"/>
			</and>
			<token><exception postag_regexp="yes" postag="NN|NN:UN"/></token>
		</pattern>
		<disambig postag="WP"/>
		<example type="ambiguous" inputform="What[what/UH,what/WDT,what/WP]" outputform="What[what/WP]"><marker>What</marker> are you doing?</example>
		<example type="untouched">What kind of bread is this?</example>				
	</rule>
	<rulegroup name="CD/NN + NNS -> CD" id="CD_NN">
	<rule>
		<pattern mark="0">
		<and>
		<token postag="CD"/>
		<token postag="NN"/>
		</and>
		<token postag="NNS"/>
		</pattern>
		<disambig postag="CD"/>
		<example type="ambiguous" inputform="two[two/CD,two/JJ,two/NN]" outputform="two[two/CD]">These <marker>two</marker> things are important.</example>
		<example type="untouched">These are those two.</example>
	</rule>		
	<rule>
	<pattern mark="0">
		<and>
		<token postag="CD"/>
		<token postag="NN"/>
		</and>
		<token postag="JJ"/>
		<token postag="NNS"/>
		</pattern>
		<disambig postag="CD"/>
		<example type="ambiguous" inputform="two[two/CD,two/JJ,two/NN]" outputform="two[two/CD]">These <marker>two</marker> bad things are important.</example>
		<example type="untouched">These are those bad two.</example>
	</rule>	
	</rulegroup> 
	<rulegroup name="Quotation marks" id="QUOT">
		<rule>
			<pattern mark="1">
			<token postag="SENT_START"/>			
			<token>&quot;</token>			
			</pattern>
			<disambig postag="``"/>
			<example type="untouched">Example 'a'</example>
			<example type="untouched">Example "a</example>
			<example type="ambiguous" inputform="&quot;[&quot;/'',&quot;/``]" outputform="&quot;[&quot;/``]"><marker>"</marker>A test.</example>
		</rule>
		<rule>
			<pattern mark="1">
			<token><exception regexp="yes">\p{Ps}</exception></token>
			<and>
			<token postag="``" spacebefore="no">&quot;</token>
			<token postag="''" spacebefore="no">&quot;</token>
			</and>
			</pattern>
			<disambig postag="''"/>
			<example type="untouched">Example 'a'</example>
			<example type="untouched">Example "a</example>
			<example type="untouched">Example ("a</example>		
			<example type="ambiguous" inputform="&quot;[&quot;/'',&quot;/``]" outputform="&quot;[&quot;/'']">A "test<marker>"</marker>.</example>
		</rule>
		<rule>
			<pattern mark="0">
			<and>
			<token postag="''" spacebefore="yes">&quot;</token>
			<token postag="``" spacebefore="yes">&quot;</token>
			</and>
			</pattern>
			<disambig postag="``"/>
			<example type="untouched">Example 'a'</example>
			<example type="untouched">Example a"</example>
			<example type="ambiguous" inputform="&quot;[&quot;/'',&quot;/``]" outputform="&quot;[&quot;/``]">A <marker>"</marker>test".</example>
		</rule>
		<rule>
			<pattern mark="1">
			<token regexp="yes">\p{Ps}</token>
			<and>
			<token postag="``" spacebefore="no">&quot;</token>
			<token postag="''" spacebefore="no">&quot;</token>
			</and>
			</pattern>
			<disambig postag="``"/>
			<example type="untouched">Example 'a'</example>
			<example type="untouched">Example "a</example>
			<example type="untouched">Example a"</example>
			<example type="ambiguous" inputform="&quot;[&quot;/'',&quot;/``]" outputform="&quot;[&quot;/``]">A (<marker>"</marker>test".</example>
		</rule>		
		</rulegroup>
	
	<rulegroup name="Add possessive ending" id="POS_ADD">
	<rule>  <!--	probably verb "is": now add to some -->
		<pattern mark_from="2" mark_to="0">
		<token><exception postag_regexp="yes" postag="NN.*"/></token>
		<token spacebefore="no" regexp="yes">['’]</token>
		<token spacebefore="no" >s</token>
		</pattern>
		<disambig action="add"><wd lemma="be" pos="VBZ">s</wd></disambig>
		<example type="untouched">This is Bill's house.</example>
		<example type="untouched">Let's go!</example>
		<example type="ambiguous" inputform="s[s/POS]" outputform="s[be/VBZ,s/POS]">Where'<marker>s</marker> Bill?</example>
	</rule>
	<!--  remove POS where it doesn't occur after the noun-->	
	<rule name="Remove possesive ending" id="POS_REMOVE">
	<!--  probably verb "is":remove -->
		<pattern mark="2">
		<token><exception postag_regexp="yes" postag="NN.*"/></token>
		<token spacebefore="no" regexp="yes">['’]</token>
		<token spacebefore="no" postag="POS">s</token>
		</pattern>
		<disambig action="remove"><wd lemma="s" pos="POS">s</wd></disambig>
		<example type="untouched">This is Bill's house.</example>
		<example type="ambiguous" inputform="s[be/VBZ,s/POS]" outputform="s[be/VBZ]">Where'<marker>s</marker> Bill?</example>
	</rule>	
	<rule> <!--  add to Bill's -->
		<pattern mark_from="1" mark_to="-1">
		<token postag_regexp="yes" postag="NN.*"/>
		<token spacebefore="no" regexp="yes">['’]</token>
		<token spacebefore="no">s</token>
		</pattern>
		<disambig action="add"><wd lemma="'" pos="POS">'</wd></disambig>
		<example type="ambiguous" inputform="'[']" outputform="'['/POS]">This is Bill<marker>'</marker>s house.</example>
		<example type="untouched">Let's go!</example>				
	</rule>
	<rule> <!--  add to Texas' or Armenians' -->
		<pattern mark_from="1" mark_to="-1">
		<token postag_regexp="yes" postag="NN.*" regexp="yes">.*s<exception scope="previous">'</exception></token>
		<token spacebefore="no" regexp="yes">['’]</token>
		<token><exception>s</exception></token>
		</pattern>
		<disambig action="add"><wd lemma="'" pos="POS">'</wd></disambig>
		<example type="untouched">This is Bill's house.</example>
		<example type="untouched">This is how 'unconscious' knowledge is posited.</example>
		<example type="untouched">Let's go!</example>
		<example type="ambiguous" inputform="'[']" outputform="'['/POS]">I hate Texas<marker>'</marker> big cities!</example>
	</rule>
	</rulegroup>
	<rule name="Goin'" id="VBG_IN">
		<pattern mark="0">
		<token regexp="yes" postag="UNKNOWN">.*in</token>
		<token spacebefore="no" regexp="yes">['’]</token>
		</pattern>
		<disambig postag="VBG"/>
		<example type="untouched">I'm in N.Y.</example>
		<example type="ambiguous" inputform="Puttin[Puttin]" outputform="Puttin[Puttin/VBG]"><marker>Puttin</marker>' on the Ritz!</example>
	</rule>
	<rulegroup name="All but" id="all_but_rb">
	<rule>
		<pattern mark="0">
		<token>all</token>
		<token regexp="yes">but|right</token>
		</pattern>
		<disambig postag="RB"/>
		<example type="untouched">All the students are happy.</example>
		<example type="ambiguous" inputform="All[all/DT]" outputform="All[all/RB]"><marker>All</marker> but one!</example>
		<example type="ambiguous" inputform="All[all/DT]" outputform="All[all/RB]"><marker>All</marker> right!</example>
	</rule>
	<rule>
		<pattern mark="1">
		<token>all</token>
		<token>but</token>
		</pattern>
		<disambig postag="RB"/>
		<example type="untouched">All the students are happy.</example>
		<example type="ambiguous" inputform="but[but/CC]" outputform="but[but/RB]">All <marker>but</marker> one!</example>
	</rule>
	</rulegroup>			
	<rule name="the + adverb/noun + the -> noun" id="THE_RBNN_THE">
		<pattern mark="1">
		<token>the</token>
		<and>
		<token postag="RB"/>
		<token postag_regexp="yes" postag="NN.*"/>
		</and>
		<token>the</token>
		</pattern>
		<disambig action="remove"><wd pos="RB"/></disambig>
		<example type="untouched">The really the interesting thing is this.</example>
		<example type="ambiguous" inputform="meanwhile[meanwhile/JJ,meanwhile/NN:U,meanwhile/RB]" outputform="meanwhile[meanwhile/JJ,meanwhile/NN:U]">In the <marker>meanwhile</marker> the whole situation changed.</example>
    </rule>
    <!-- AtD false alarm rules -->
	<!-- in all ways::filter=kill -->
  <rule id="IN_ALL_WAYS" name="in all ways">
    <pattern>
      <token>in</token>
      <token>all</token>
      <token>ways</token>
    </pattern>
    <disambig action="immunize"/>
  </rule>
  <rule id="MD_STAND_ALONE" name="MD stand alone">
    <pattern>
      <token postag="MD"><exception postag="MD" negate_pos="yes"/></token>
      <token>stand</token>
      <token>alone</token>
    </pattern>
    <disambig action="immunize"/>
  </rule>
  <rule id="TO_STAND_ALONE" name="to stand alone">
    <pattern>
      <token>to</token>
      <token>stand</token>
      <token>alone</token>
    </pattern>
    <disambig action="immunize"/>
  </rule>
<!-- &comparisons then 0END.0::filter=kill -->
  <rule id="COMPARISONS_THEN_0END0" name="comparisons then 0END0">
    <pattern>
      <token regexp="yes">hotter|colder|lamer|less|lesser|more|greater|heavier|lighter|better|worse|smarter|dumber|cheaper|sexier|taller|shorter|faster|slower|older|younger|easier|harder|farther|closer|higher|lower|larger|smaller|sooner|later|weaker|stronger|louder|quieter|darker|brighter</token>
      <token>then</token>
      <token postag="SENT_END"></token>
    </pattern>
    <disambig action="immunize"/>
  </rule>
<!-- Who's|who's .*ing::filter=kill -->
  <rule id="WHOSWHOS_ING" name="Whos whos ing">
    <pattern case_sensitive="yes">
      <token regexp="yes">Who|who</token>
      <token>'</token>
      <token>s</token>
      <token regexp="yes">.*ing</token>
    </pattern>
    <disambig action="immunize"/>
  </rule>
</rules>
