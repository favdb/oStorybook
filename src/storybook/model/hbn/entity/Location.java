/*
Storybook: Open Source software for novelists and authors.
Copyright (C) 2008 - 2012 Martin Mustun

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package storybook.model.hbn.entity;



/**
 * Location generated by hbm2java
 * @hibernate.class
 *   table="LOCATION"
 */
public class Location extends AbstractEntity implements Comparable<Location> {

	private String name;
	private String address;
	private String city;
	private String country;
	private Integer altitude;
	private String description;
	private String notes;
	private Location site;

	public Location() {
	}

	public Location(String name, String address, String city, String country,
			Integer altitude, String description, String notes, Location site) {
		this.name = name;
		this.address = address;
		this.city = city;
		this.country = country;
		this.altitude = altitude;
		this.description = description;
		this.notes = notes;
		this.site = site;
	}

	/**
	 * @hibernate.id
	 *   column="ID"
	 *   generator-class="increment"
	 *   unsaved-value="null"
	 */
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @hibernate.property
	 */
	public String getName() {
		if (name == null) {
			return "";
		}
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @hibernate.property
	 */
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = (city == null ? "" : city);
	}

	public boolean hasCity() {
		return !((this.city == null) || (this.city.isEmpty()));
	}

	/**
	 * @hibernate.property
	 */
	public String getCountry() {
		return this.country;
	}

	public String getCountryCity() {
		if (hasSite()) {
			return getSite().getFullName();
		} else {
		   if (hasCountry()) {
			  return this.country + ", " + this.city;
		   }
		   return this.city;
		}
	}

	public void setCountry(String country) {
		this.country = (country == null ? "" : country);
	}

	public boolean hasCountry() {
		return !((this.country == null) || (this.country.isEmpty()));
	}

	/**
	 * @hibernate.property
	 */
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @hibernate.property
	 */
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Integer getAltitude() {
		return this.altitude;
	}

	public void setAltitude(Integer altitude) {
		this.altitude = altitude;
	}

	/**
	 * @hibernate.property
	 */
    public Location getSite() {
        return this.site;
    }

    public boolean hasSite() {
        return site != null;
    }

    public void setSite(Location site) {
    	if (site == null)
    	{
            this.site = null;
    		return;
    	}
    	// verify short loop - this is his new father
    	if (this.equals(site))
    		return;
    	
    	// verify long loop - this is in the tree in his new father.
    	Location father = site.getSite();
    	while (father != null) {
    		if (this.equals(father)) {
    			return;
    		}
    		father = father.getSite();
    	}
    	
    	// it's OK.
        this.site = site;

        try {
        // Compatibility with earlier oStorybook versions (9.4.17 or earlier)
		if (site.hasCity())
        {
        	// the location belongs to a site in a city
        	// thus it will have the same "old hierarchy".
        	setCity(site.getCity());
        	setCountry(site.getCountry());
        }
        else if (site.hasCountry())
        {
        	// the location belongs to a site that is a city
        	// thus it will be inside it for "old hierarchy".
        	setCity(site.getName());
        	setCountry(site.getCountry());
        }
        else
        {
        	// the location belongs to a site that is a country
        	// thus it will be a city inside it for "old hierarchy".
        	setCity(null);
        	setCountry(site.getName());
        }
        } catch (Exception e) { e.printStackTrace(); }
    }

    public void setSite() {
        this.site = null;
    }

	/**
	 * @hibernate.property
	 */
	public String getNotes() {
		return this.notes;
	}

	public void setNotes(String notes) {
		this.notes = notes;
	}

	public String getFullName() {
		return getFullName(false);
	}

	public String getFullName(boolean reverse) {
		StringBuffer buf = new StringBuffer();

		if (reverse) {
			if (hasCountry()) {
				buf.append(country + ": ");
			}
			if (hasCity()) {
				buf.append(city + ": ");
			}
			if (hasSite()) {
				buf.append(getFullParentName() + ": ");
			} 
			buf.append(getName());
			return buf.toString();
		}

		buf.append(getName());
		if (hasSite()) {
			buf.append(", " + getFullParentName());
		}
		if (hasCity()) {
			buf.append(", " + city);
		}
		if (hasCountry()) {
			buf.append(", " + country);
		}
		return buf.toString();
	}

	public String getFullParentName() {
		if (!hasSite()) {
			return "";
		}
		String parent = hasSite() ? getSite().getName() : null;
		boolean isCity = hasCity() ? city.equals(parent) : false;
		boolean isCountry = hasCountry() ? country.equals(parent) : false;
		if (!isCity && !isCountry)
		{
		   String name = site.hasSite() ? getSite().getFullParentName() + "," : "";
		   return name + site.getName();
		}
		return "";
	}

	@Override
	public String toString() {
		return getName();
	}

	@Override
	public boolean equals(Object obj) {
		if (!super.equals(obj)) {
			return false;
		}
		Location test = (Location) obj;
		boolean ret = true;
		ret = ret && equalsStringNullValue(name, test.getName());
		ret = ret && equalsStringNullValue(address, test.getAddress());
		ret = ret && equalsStringNullValue(city, test.getCity());
		ret = ret && equalsStringNullValue(country, test.getCountry());
		ret = ret && (site == null) || (test.getSite() == null) ||(site.equals(test.getSite()));
		ret = ret && equalsIntegerNullValue(altitude, test.getAltitude());
		ret = ret && equalsStringNullValue(description, test.getDescription());
		ret = ret && equalsStringNullValue(notes, test.getNotes());
		return ret;
	}

	@Override
	public int hashCode() {
		int hash = super.hashCode();
		hash = hash * 31 + (name != null ? name.hashCode() : 0);
		hash = hash * 31 + (address != null ? address.hashCode() : 0);
		hash = hash * 31 + (city != null ? city.hashCode() : 0);
		hash = hash * 31 + (country != null ? country.hashCode() : 0);
		hash = hash * 31 + (altitude != null ? altitude.hashCode() : 0);
		hash = hash * 31 + (description != null ? description.hashCode() : 0);
		hash = hash * 31 + (notes != null ? notes.hashCode() : 0);
		return hash;
	}

	@Override
	public int compareTo(Location o) {
		if (hasSite() && (!o.hasSite())) {
			return 1;
		}
		if (!hasSite() && (o.hasSite())) {
			return -1;
		}
		if (hasSite() && (o.hasSite()) && (!(getSite().equals(o.getSite())))) {
			return getSite().compareTo(o.getSite());
		}
		if (country == null && o.getCountry() == null) {
			return name.compareTo(o.getName());
		}
		if (country != null && o.getCountry() == null) {
			return -1;
		}
		if (o.getCountry() != null && country == null) {
			return -1;
		}
		int cmp = country.compareTo(o.getCountry());
		if (cmp == 0) {
			if (city == null && o.getCity() == null) {
				return 0;
			}
			if (city != null && o.getCity() == null) {
				return -1;
			}
			if (o.getCity() != null && city == null) {
				return -1;
			}
			int cmp2 = city.compareTo(o.getCity());
			if (cmp2 == 0) {
			    return name.compareTo(o.getName());
			}
			return cmp2;
		}
		return cmp;
	}
}
